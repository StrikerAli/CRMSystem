@page "/login"


<!-- Login Frontend desgined in Redzen, uses basic loginModel for Email and password holding for form sumbission, information is passed to other login.cshtml for actual authentication logic. -->


@using Microsoft.AspNetCore.Identity
@using Radzen
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<div style="background: url('/assets/login-background.png') no-repeat center center fixed; background-size: cover; height: 100vh; display: flex; align-items: center; justify-content: center;">
    <RadzenCard Style="width: 350px; background-color: rgba(255, 255, 255, 0.9); padding: 2rem; border-radius: 15px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);">

        <div class="text-center mb-4">
            <img src="/assets/logo.png" alt="Logo" style="height: 60px;" />
            <h2 class="mt-3">Sign in</h2>
            <p style="font-size: small;">with your CRM account</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div style="color: red; margin-bottom: 1rem; text-align:center;">
                @errorMessage
            </div>
        }

        <RadzenTemplateForm TItem="LoginModel" Submit="@OnSubmit">
            <RadzenTextBox @bind-Value="loginModel.Email"
                           Name="Email"
                           Placeholder="Email"
                           Style="@GetEmailStyle()"
                           Required="true"
                           RequiredValidatorText="Email is required" />

            <RadzenPassword @bind-Value="loginModel.Password"
                            Name="Password"
                            Placeholder="Password"
                            Style="width:100%; margin-bottom: 1rem;"
                            Required="true"
                            RequiredValidatorText="Password is required" />

            <RadzenButton ButtonType="ButtonType.Submit"
                          Text="Sign in"
                          Style="width: 100%; background-color: #7ce0db; color: black; margin-top: 1rem;"
                          Click="@(async args => { await OnSubmit(); })" />
        </RadzenTemplateForm>

        <RadzenButton Text="Sign up"
                      Style="width: 100%; margin-top: 1rem; background-color: lightgray; color: black;"
                      Click="@(() => NavigationManager.NavigateTo("/signup"))" />
    </RadzenCard>
</div>

@code {
    LoginModel loginModel = new();
    string errorMessage = "";
    bool emailInvalid = false;

    protected override void OnInitialized()
    {
        var query = HttpContextAccessor.HttpContext?.Request.Query;
        if (query != null && query.ContainsKey("error"))
        {
            var error = query["error"].ToString();
            if (error == "InvalidCredentials")
            {
                errorMessage = "Invalid email or password.";
            }
            else if (error == "FieldsRequired")
            {
                errorMessage = "Email and Password are required.";
            }
            else
            {
                errorMessage = "An unknown error occurred.";
            }
        }
    }

    async Task OnSubmit()
    {
        errorMessage = "";
        emailInvalid = false;

        if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            errorMessage = "Email and Password are required.";
            return;
        }

        if (!IsValidEmail(loginModel.Email))
        {
            emailInvalid = true;
            errorMessage = "Invalid email format.";
            return;
        }

        // Only if credentials are filled and format is valid, go to /Account/Login
        var url = $"/Account/Login?returnUrl=/dashboard"
                    + $"&email={Uri.EscapeDataString(loginModel.Email)}"
                    + $"&password={Uri.EscapeDataString(loginModel.Password)}";

        NavigationManager.NavigateTo(url, forceLoad: true);
    }

    //check for email format validity
    bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    string GetEmailStyle()
    {
        return $"width:100%; margin-bottom: 1rem;{(emailInvalid ? " border:2px solid red;" : "")}";
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
