@page "/signup"


<!-- same logic as Login for signup, use SignUpModel for temporary information holding, UserManager.CreateAsync for making new users -->







@using Microsoft.AspNetCore.Identity
@using Radzen
@using Radzen.Blazor
@inject NavigationManager NavigationManager
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager

<div style="background: url('/assets/login-background.png') no-repeat center center fixed; background-size: cover; height: 100vh; display: flex; align-items: center; justify-content: center;">
    <RadzenCard Style="width: 350px; background-color: rgba(255, 255, 255, 0.9); padding: 2rem; border-radius: 15px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);">

        <div class="text-center mb-4">
            <img src="/assets/logo.png" alt="Logo" style="height: 60px;" />
            <h2 class="mt-3">Sign Up</h2>
            <p style="font-size: small;">Create a new CRM account</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div style="color: red; margin-bottom: 1rem; text-align:center;">
                @errorMessage
            </div>
        }

        <RadzenTemplateForm TItem="SignUpModel" Submit="@OnSubmit">
            <RadzenTextBox @bind-Value="signUpModel.Email"
                           Name="Email"
                           Placeholder="Email"
                           Style="width:100%; margin-bottom: 1rem;"
                           Required="true"
                           RequiredValidatorText="Email is required" />

            <RadzenTextBox @bind-Value="signUpModel.UserName"
                           Name="UserName"
                           Placeholder="Username"
                           Style="width:100%; margin-bottom: 1rem;"
                           Required="true"
                           RequiredValidatorText="Username is required" />

            <RadzenPassword @bind-Value="signUpModel.Password"
                            Name="Password"
                            Placeholder="Password"
                            Style="width:100%; margin-bottom: 1rem;"
                            Required="true"
                            RequiredValidatorText="Password is required" />

            <RadzenPassword @bind-Value="signUpModel.ConfirmPassword"
                            Name="ConfirmPassword"
                            Placeholder="Confirm Password"
                            Style="width:100%; margin-bottom: 1rem;"
                            Required="true"
                            RequiredValidatorText="Confirm password is required" />

            <RadzenButton ButtonType="ButtonType.Submit"
                          Text="Sign Up"
                          Style="width: 100%; background-color: #7ce0db; color: black; margin-top: 1rem;" 
                          Click="@(async args => { Console.WriteLine("Sign In button clicked."); await OnSubmit(); })" />


        </RadzenTemplateForm>

        <RadzenButton Text="Already have an account?"
                      Style="width: 100%; margin-top: 1rem; background-color: lightgray; color: black;"
                      Click="@(() => NavigationManager.NavigateTo("/login"))" />
    </RadzenCard>
</div>

@code {
    SignUpModel signUpModel = new SignUpModel();
    string errorMessage = "";

    async Task OnSubmit()
    {
        Console.WriteLine("OnSubmit method called.");

        errorMessage = "";

        // Check if the passwords match
        if (signUpModel.Password != signUpModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            Console.WriteLine("Error: Passwords do not match.");
            return;
        }

        if (string.IsNullOrEmpty(signUpModel.Email) || string.IsNullOrEmpty(signUpModel.Password) || string.IsNullOrEmpty(signUpModel.UserName))
        {
            errorMessage = "All fields are required.";
            Console.WriteLine("Error: Some fields are empty.");
            return;
        }

        if (!IsValidEmail(signUpModel.Email))
        {
            errorMessage = "Invalid email format.";
            Console.WriteLine($"Error: Invalid email format: {signUpModel.Email}");
            return;
        }

        // Check if user already exists
        var existingUser = await UserManager.FindByEmailAsync(signUpModel.Email);

        if (existingUser != null)
        {
            errorMessage = "A user with this email already exists.";
            Console.WriteLine("Error: User already exists.");
            return;
        }

        // Create a new user
        var newUser = new IdentityUser
            {
                UserName = signUpModel.UserName,
                Email = signUpModel.Email
            };

        var result = await UserManager.CreateAsync(newUser, signUpModel.Password);

        if (result.Succeeded)
        {
            Console.WriteLine("Sign up successful.");
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            errorMessage = "Sign up failed. Please try again.";
            Console.WriteLine("Sign up failed.");
        }
    }

    bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    public class SignUpModel
    {
        public string Email { get; set; }
        public string UserName { get; set; }
        public string Password { get; set; }
        public string ConfirmPassword { get; set; }
    }
}
